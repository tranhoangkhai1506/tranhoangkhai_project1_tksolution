@page "/donvitinh-list"
@inject iDonViTinhService DonViTinhSevice
@inject iSanPhamService SanPhamService
@inject IJSRuntime js
@inject ShowErrorMessage SweetAlert
@inject NavigationManager nav
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject IJSRuntime js


<PageTitle>ĐƠN VỊ TÍNH</PageTitle>
<h1 style="text-align: center;"><strong>ĐƠN VỊ TÍNH</strong></h1>
<hr />


@if (itemsQueryable is null)
{
    <hr />
    <p>Chưa tìm thấy đơn vị tính nào! Vui lòng thêm đơn vị tính!</p>
}
else
{
    <div class="page-size-chooser mb-3">
        ITEMS PER PAGE:
        <select class="form-select form-select-sm" style="width: auto; display: inline-block;" @bind="@pagination.ItemsPerPage">
            <option>5</option>
            <option>10</option>
            <option>15</option>
            <option>25</option>
        </select>
    </div>
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <strong>THÔNG TIN ĐƠN VỊ TÍNH</strong>
            <button class="btn btn-outline-success" @onclick="AddDVT">THÊM ĐƠN VỊ TÍNH</button>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <QuickGrid Items="@FilteredDonViTinh" Pagination="@pagination" class="table table-striped table-hover">
                    <PropertyColumn Property="@(c => c.DonViTinhID)" Sortable="true" Align="Align.Center" Title="ID"> </PropertyColumn>

                    <PropertyColumn Property="@(c => c.Ten_Don_Vi_Tinh)" Sortable="true" Align="Align.Center" Title="TÊN ĐƠN VỊ">
                        <ColumnOptions>
                            <div class="search-box">
                                <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Tên đơn vị..." />
                            </div>
                        </ColumnOptions>
                    </PropertyColumn>
                    <PropertyColumn Property="@(c => c.Ghi_Chu)" Sortable="true" Title="GHI CHÚ" />
                    <TemplateColumn Title="Actions" Class="text-left">
                        <button class="btn btn-info btn-sm me-1" @onclick="@(() =>EditDVT(context.DonViTinhID.ToString()))">Hiệu chỉnh</button>
                        <button class="btn btn-danger btn-sm me-1" @onclick="@(() => DeleteDVT(context.DonViTinhID.ToString()))">Xóa</button>
                    </TemplateColumn>
                </QuickGrid>
            </div>
        </div>
        <div class="card-footer">
            <div class="hstack gap-3 float-end">
                <div class="page-buttons d-flex justify-content-around">
                    @if (pagination.TotalItemCount.HasValue)
                    {
                        <div class="btn-group">
                            @for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
                            {
                                var capturedIndex = pageIndex;
                                <button @onclick="@(() => GoToPageAsync(capturedIndex))"
                                        class="@PageButtonClass(capturedIndex) btn btn-secondary mx-1"
                                        aria-current="@AriaCurrentValue(capturedIndex)"
                                        aria-label="Go to page @(pageIndex + 1)">
                                    @(pageIndex + 1)
                                </button>
                            }
                        </div>

                    }
                </div>
            </div>
        </div>
    </div>

    
    @*  <Paginator State="@pagination" /> *@
    
    <hr/>
    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @ErrorMessage
        </div>
    }
    
}

@code {
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    IQueryable<DonViTinhModel>? itemsQueryable;
    string nameFilter;
    private string ErrorMessage { get; set; }
    IQueryable<DonViTinhModel> FilteredDonViTinh
    {
        get
        {
            var result = itemsQueryable;
            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = itemsQueryable.Where(c => c.Ten_Don_Vi_Tinh.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }

            return result;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        itemsQueryable = (await DonViTinhSevice.GetAllDonViTinhAsync()).AsQueryable();
        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    void EditDVT(string tendonvi)
    {
        nav.NavigateTo($"/edit-donvitinh/{tendonvi}");
    }

    void AddDVT()
    {
        nav.NavigateTo($"/edit-donvitinh");
    }
    async Task DeleteDVT(string tendonvi)
    {
        ErrorMessage = "";
        var existSanPham = await SanPhamService.GetByDVTAsync(Int16.Parse(tendonvi));
        if (existSanPham is null)
        {
            var confirmed = await js.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn xóa đơn vị tính này?");
            if (confirmed)
            {
                await DonViTinhSevice.DeleteDonViTinhAsync(Int16.Parse(tendonvi));
                await SweetAlert.ShowToast("Xóa thành công!", "Success", 1000);
                itemsQueryable = (await DonViTinhSevice.GetAllDonViTinhAsync()).AsQueryable();
                pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();

            }
        }
        else
        {
            await SweetAlert.ShowToast("Không thể xóa Đơn vị tính!", "Error", 1000);
        }
        
    }
    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? PageButtonClass(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;
}
