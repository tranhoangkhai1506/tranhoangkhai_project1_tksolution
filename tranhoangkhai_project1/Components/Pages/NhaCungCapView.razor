 @page "/nhacungcap-list"
@inject iNhaCungCapService NhaCungCapService

@inject NavigationManager nav
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<PageTitle>NHÀ CUNG CẤP</PageTitle>
<h1>NHÀ CUNG CẤP</h1>
<hr />
<button class="btn btn-primary" @onclick="AddNhaCungCap">Thêm Nhà Cung Cấp</button>
@if (itemsQueryable is null)
{
    <hr />
    <p>Chưa tìm thấy nhà cung cấp nào! Vui lòng thêm nhà cung cấp!</p>
}
else
{
    <hr />
    <div class="page-size-chooser mb-3">
        Items per page:
        <select class="form-select form-select-sm" style="width: auto; display: inline-block;" @bind="@pagination.ItemsPerPage">
            <option>3</option>
            <option>5</option>
            <option>10</option>
            <option>15</option>
        </select>
    </div>

    <div class="table-responsive">
        <QuickGrid Items="@itemsQueryable" Pagination="@pagination" class="table table-striped table-hover">
            <PropertyColumn Property="@(c => c.Ma_NCC)" Sortable="true" Title="MÃ" />
            <PropertyColumn Property="@(c => c.Ten_NCC)" Sortable="true" Title="TÊN NHÀ CUNG CẤP" />
            <PropertyColumn Property="@(c => c.Ghi_Chu)" Sortable="true" Title="GHI CHÚ" />
            <TemplateColumn Title="Actions" Class="text-center">
                <button class="btn btn-info btn-sm me-1" @onclick="@(() => EditNhaCungCap(context.Ma_NCC))">Hiệu chỉnh</button>
                <button class="btn btn-danger btn-sm me-1" @onclick="@(() => DeleteNhaCungCap(context.Ma_NCC))">Xóa</button>
            </TemplateColumn>
        </QuickGrid>
    </div>
    @*  <Paginator State="@pagination" /> *@
    <div class="page-buttons d-flex justify-content-around">
        Page:
        @if (pagination.TotalItemCount.HasValue)
        {
            <div class="btn-group">
                @for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
                {
                    var capturedIndex = pageIndex;
                    <button @onclick="@(() => GoToPageAsync(capturedIndex))"
                            class="@PageButtonClass(capturedIndex) btn btn-secondary mx-1"
                            aria-current="@AriaCurrentValue(capturedIndex)"
                            aria-label="Go to page @(pageIndex + 1)">
                        @(pageIndex + 1)
                    </button>
                }
            </div>

        }
    </div>

}

@code {
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    IQueryable<NhaCungCapModel>? itemsQueryable;
    protected override async Task OnInitializedAsync()
    {
        itemsQueryable = (await NhaCungCapService.GetAllNhaCungCapAsync()).AsQueryable();
        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? PageButtonClass(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;

    void EditNhaCungCap(string maNCC)
    {
        nav.NavigateTo($"/edit-nhacungcap/{maNCC}");
    }

    void AddNhaCungCap()
    {
        nav.NavigateTo($"/edit-nhacungcap");
    }
    async Task DeleteNhaCungCap(string maNCC)
    {
        await NhaCungCapService.DeleteNhaCungCapAsync(maNCC);
        itemsQueryable = (await NhaCungCapService.GetAllNhaCungCapAsync()).AsQueryable();
        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }
}