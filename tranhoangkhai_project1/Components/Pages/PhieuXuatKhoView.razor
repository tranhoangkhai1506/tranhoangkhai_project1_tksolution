 @page "/phieuxuatkho-list"
@inject iPhieuXuatKhoService PhieuXuatKhoService
@inject iHieuChinhPhieuNhapKhoService HieuChinhPhieuNhapKhoService
@inject IJSRuntime js
@inject NavigationManager nav
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<PageTitle>PHIẾU XUẤT KHO</PageTitle>
<h1>PHIẾU XUẤT KHO</h1>
<hr />
<button class="btn btn-primary" @onclick="AddPhieuXuatKho">Thêm phiếu xuất kho</button>
@if (itemsQueryable is null)
{
    <hr />
    <p>Chưa tìm thấy loại phiếu xuất kho nào! Vui lòng thêm phiếu xuất kho!</p>
}
else
{
    <hr />
    <div class="page-size-chooser mb-3">
        Items per page:
        <select class="form-select form-select-sm" style="width: auto; display: inline-block;" @bind="@pagination.ItemsPerPage">
            <option>3</option>
            <option>5</option>
            <option>10</option>
            <option>15</option>
        </select>
    </div>

    <div class="table-responsive">
        <QuickGrid Items="@itemsQueryable" Pagination="@pagination" class="table table-striped table-hover">
            <PropertyColumn Property="@(c => c.So_Phieu_Xuat_Kho)" Sortable="true" Title="MÃ PHIẾU" />
            <PropertyColumn Property="@(c => c.Kho_ID)" Sortable="true" Title="MÃ KHO" />
            <PropertyColumn Property="@(c => c.Ngay_Nhap_Kho)" Format="dd-MM-yyyy" Sortable="true" Title="NGÀY NHẬP" />
            <PropertyColumn Property="@(c => c.Ghi_Chu)" Sortable="true" Title="GHI CHÚ" />
            <TemplateColumn Title="Actions" Class="text-center">
                <button class="btn btn-info btn-sm me-1" @onclick="@(() => HieuChinh(context.So_Phieu_Xuat_Kho))">Hiệu chỉnh</button>
                <button class="btn btn-danger btn-sm me-1" @onclick="@(() => DeletePhieuXuatKho(context.So_Phieu_Xuat_Kho))">Xóa</button>
            </TemplateColumn>
        </QuickGrid>
    </div>
    @*  <Paginator State="@pagination" /> *@
    <div class="page-buttons d-flex justify-content-around">
        Page:
        @if (pagination.TotalItemCount.HasValue)
        {
            <div class="btn-group">
                @for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
                {
                    var capturedIndex = pageIndex;
                    <button @onclick="@(() => GoToPageAsync(capturedIndex))"
                            class="@PageButtonClass(capturedIndex) btn btn-secondary mx-1"
                            aria-current="@AriaCurrentValue(capturedIndex)"
                            aria-label="Go to page @(pageIndex + 1)">
                        @(pageIndex + 1)
                    </button>
                }
            </div>

        }
    </div>

    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @ErrorMessage
        </div>
    }

}

@code {
    public string ErrorMessage { get; set; }
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    IQueryable<PhieuXuatKhoModel>? itemsQueryable;
    protected override async Task OnInitializedAsync()
    {
        itemsQueryable = (await PhieuXuatKhoService.GetAllPhieuXuatKhoAsync()).AsQueryable();
        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? PageButtonClass(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;
    

    void AddPhieuXuatKho()
    {
        nav.NavigateTo($"/edit-phieuxuatkho");
    }
    async Task DeletePhieuXuatKho(string maphieu)
    {
        var hieuchinhPhieuXuatKho = await HieuChinhPhieuNhapKhoService.GetByIdAsync(maphieu);

        if (hieuchinhPhieuXuatKho is null)
        {
            var confirmed = await js.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn xóa phiếu này?");
            if (confirmed)
            {
                await PhieuXuatKhoService.DeletePhieuXuatKhoAsync(maphieu);
                itemsQueryable = (await PhieuXuatKhoService.GetAllPhieuXuatKhoAsync()).AsQueryable();
                pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
            }
        }
        else
        {
            ErrorMessage = "Không thể xóa phiếu nhập!";
            return;
        }

    }
    async Task HieuChinh(string So_Phieu_Xuat_Kho)
    {
        nav.NavigateTo($"/edit-hieuchinhphieuxuat/{So_Phieu_Xuat_Kho}");
    }
}