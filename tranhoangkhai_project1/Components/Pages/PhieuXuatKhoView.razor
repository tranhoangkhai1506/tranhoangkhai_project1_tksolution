 @page "/phieuxuatkho-list"

@inject iPhieuXuatKhoService PhieuXuatKhoService
@inject iHieuChinhPhieuXuatKhoService HieuChinhXuatNhapKhoService
@inject iChiTietPhieuXuatKhoService ChiTietPhieuXuatKhoService
@inject IJSRuntime js
@inject ShowErrorMessage SweetAlert
@inject NavigationManager nav
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<PageTitle>PHIẾU XUẤT KHO</PageTitle>
<h1>PHIẾU XUẤT KHO</h1>
<hr />
<button class="btn btn-primary" @onclick="AddPhieuXuatKho">Thêm phiếu xuất kho</button>
@if (itemsQueryable is null)
{
    <hr />
    <p>Chưa tìm thấy loại phiếu xuất kho nào! Vui lòng thêm phiếu xuất kho!</p>
}
else
{
    <hr />
    <div class="page-size-chooser mb-3">
        Items per page:
        <select class="form-select form-select-sm" style="width: auto; display: inline-block;" @bind="@pagination.ItemsPerPage">
            <option>3</option>
            <option>5</option>
            <option>10</option>
            <option>15</option>
        </select>
    </div>

    <div class="table-responsive">
        <QuickGrid Items="@itemsQueryable" Pagination="@pagination" class="table table-striped table-hover">
            <PropertyColumn Property="@(c => c.So_Phieu_Xuat_Kho)" Sortable="true" Title="MÃ PHIẾU" />
            <PropertyColumn Property="@(c => c.Kho_ID)" Sortable="true" Title="MÃ KHO" />
            <PropertyColumn Property="@(c => c.Ngay_Nhap_Kho)" Format="dd-MM-yyyy" Sortable="true" Title="NGÀY NHẬP" />
            <PropertyColumn Property="@(c => c.Ghi_Chu)" Sortable="true" Title="GHI CHÚ" />
            <TemplateColumn Title="Actions" Class="text-center">
                <button class="btn btn-outline-success btn-sm me-1" @onclick="@(() => ChiTiet(context.So_Phieu_Xuat_Kho))">Chi tiết</button>
                <button class="btn btn-info btn-sm me-1" @onclick="@(() => HieuChinh(context.So_Phieu_Xuat_Kho))">Hiệu chỉnh</button>
                <button class="btn btn-danger btn-sm me-1" @onclick="@(() => DeletePhieuXuatKho(context.So_Phieu_Xuat_Kho))">Xóa</button>
                @* <button class="btn btn-primary btn-sm me-1" @onclick="@(() => ShowReportByID(context.So_Phieu_Xuat_Kho))">Xem Report</button> *@
                <button class="btn btn-secondary btn-sm" @onclick="@(() => Print(context.So_Phieu_Xuat_Kho))">In</button>
            </TemplateColumn>
        </QuickGrid>
    </div>
    @*  <Paginator State="@pagination" /> *@
    <div class="page-buttons d-flex justify-content-around">
        Page:
        @if (pagination.TotalItemCount.HasValue)
        {
            <div class="btn-group">
                @for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
                {
                    var capturedIndex = pageIndex;
                    <button @onclick="@(() => GoToPageAsync(capturedIndex))"
                            class="@PageButtonClass(capturedIndex) btn btn-secondary mx-1"
                            aria-current="@AriaCurrentValue(capturedIndex)"
                            aria-label="Go to page @(pageIndex + 1)">
                        @(pageIndex + 1)
                    </button>
                }
            </div>

        }
    </div>
    <hr />

    <div id="PrintDivXuatKhoReport" style="display: none;">
        @if (currentReportId != null)
        {
            @DynamicComponent(currentReportId)
        }
    </div>
}

@code {
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    private string currentReportId;
    IQueryable<PhieuXuatKhoModel>? itemsQueryable;


    private async Task ChiTiet(string So_Phieu_Nhap_Kho)
    {
        nav.NavigateTo($"/chitietphieuxuatkho-list/{So_Phieu_Nhap_Kho}");
    }
    protected override async Task OnInitializedAsync()
    {
        itemsQueryable = (await PhieuXuatKhoService.GetAllPhieuXuatKhoAsync()).AsQueryable();
        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? PageButtonClass(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;


    void AddPhieuXuatKho()
    {
        nav.NavigateTo($"/edit-phieuxuatkho");
    }
    async Task DeletePhieuXuatKho(string maphieu)
    {
        var hieuchinhXuatKho = await HieuChinhXuatNhapKhoService.GetByIdAsync(maphieu);
        var chitietPhieuXuat = await ChiTietPhieuXuatKhoService.GetAllChiTietByKhoIDAsync(maphieu);
        if (hieuchinhXuatKho is null && chitietPhieuXuat.Count() == 0)
        {

            var confirmed = await js.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn xóa phiếu này?");
            if (confirmed)
            {
                await PhieuXuatKhoService.DeletePhieuXuatKhoAsync(maphieu);
                await SweetAlert.ShowToast("Xóa thành công", "Success", 1000);
                itemsQueryable = (await PhieuXuatKhoService.GetAllPhieuXuatKhoAsync()).AsQueryable();
                pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
            }
        }
        else
        {
            await SweetAlert.ShowMessage("Error", "Không thể xóa phiếu!", "Error");
            return;
        }

    }
    async Task HieuChinh(string So_Phieu_Xuat_Kho)
    {
        nav.NavigateTo($"/edit-hieuchinhphieuxuat/{So_Phieu_Xuat_Kho}");
    }

    private RenderFragment DynamicComponent(string reportId) => builder =>
    {
        builder.OpenComponent(0, typeof(PhieuXuatKhoReportViewer));
        builder.AddAttribute(1, "So_Phieu_Xuat_Kho", reportId);
        builder.SetKey(reportId); // Đặt key để Blazor nhận biết sự thay đổi
        builder.CloseComponent();
    };


    private async Task ShowReportByID(string So_Phieu_Nhap_Kho)
    {
        currentReportId = So_Phieu_Nhap_Kho;
        await InvokeAsync(StateHasChanged);
    }

    private async Task Print(string So_Phieu_Nhap_Kho)
    {
        var chitietPhieuXuat = await ChiTietPhieuXuatKhoService.GetAllChiTietByKhoIDAsync(So_Phieu_Nhap_Kho);
        if (chitietPhieuXuat.Count() != 0)
        {
            currentReportId = So_Phieu_Nhap_Kho;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(300); // Đảm bảo có đủ thời gian cho việc render lại UI
            await js.InvokeVoidAsync("PrintPhieuXuatKhoReport");
        }
        else
        {
            await SweetAlert.ShowMessage("Error", "Không tìm thấy chi tiết phiếu xuất nào!", "Error");
        }

    }
}
<script type="text/javascript">
    function PrintPhieuXuatKhoReport() {
        var printDivContent = document.getElementById("PrintDivXuatKhoReport").innerHTML;
        var windowToPrint = window.open('', '', 'height=600,width=800');
        windowToPrint.document.write('<html><head><title>Print</title></head>');
        windowToPrint.document.write('<body>');
        windowToPrint.document.write(printDivContent);
        windowToPrint.document.write('</body></html>');
        windowToPrint.document.close();
        windowToPrint.focus();
        setTimeout(function () {
            windowToPrint.print();
            windowToPrint.onafterprint = function () { windowToPrint.close(); };
        }, 500); // Đảm bảo báo cáo được load đầy đủ trước khi in
    }
</script>
