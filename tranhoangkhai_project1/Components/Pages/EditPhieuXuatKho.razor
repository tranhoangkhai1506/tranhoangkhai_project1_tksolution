@page "/edit-phieuxuatkho"
@page "/edit-phieuxuatkho/{So_Phieu_Xuat_Kho}"
@inject iKhoService KhoSevice
@inject iPhieuXuatKhoService PhieuXuatKhoService
@inject IJSRuntime js
@inject ShowErrorMessage SweetAlert
@inject NavigationManager nav
@rendermode @(new InteractiveServerRenderMode(prerender:false))

@if (So_Phieu_Xuat_Kho is null)
{
    <PageTitle>THÊM PHIẾU XUẤT KHO</PageTitle>

    <h1 style="text-align: center;"><strong>THÊM PHIẾU XUẤT KHO</strong></h1>
    <hr />
    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @ErrorMessage
        </div>
    }
    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-6">
                <div class="card">
                    <div class="card-header"><strong>THÔNG TIN PHIẾU XUẤT KHO</strong></div>
                    <div class="card-body">
                        <EditForm Model="phieuXuatKho" OnSubmit="HandleSubmit">
                            <div>
                                <label for="So_Phieu_Xuat_Kho">Số Phiếu xuất Kho</label>
                                <InputText id="So_Phieu_Xuat_Kho" @bind-Value="phieuXuatKho.So_Phieu_Xuat_Kho" class="form-control"></InputText>
                            </div>
                            <div>
                                <label for="Kho_ID">Kho</label>
                                <InputSelect class="form-control" id="Kho_ID" @bind-Value="phieuXuatKho.Kho_ID">
                                    <option value="" disabled selected>Chọn kho</option>
                                    @foreach (var kho in listKho)
                                    {
                                        <option value="@kho.Ten_Kho">@kho.Ten_Kho</option>
                                    }
                                </InputSelect>
                            </div>
                            <div>
                                <label for="ngayNhapKho">Ngày xuất Kho</label>
                                <InputDate id="ngayNhapKho" @bind-Value="phieuXuatKho.Ngay_Nhap_Kho" class="form-control"></InputDate>
                            </div>

                            <div>
                                <label for="Ghi_Chu">Ghi Chú</label>
                                <InputText id="Ghi_Chu" @bind-Value="phieuXuatKho.Ghi_Chu" class="form-control"></InputText>
                            </div>
                        </EditForm>
                    </div>
                    <div class="card-footer">
                        <div class="hstack gap-3 float-end">
                            <form method="dialog">
                                <button class="btn btn-danger" @onclick="OnClose">Close</button>
                            </form>
                            <button class="btn btn-success" @onclick="HandleSubmit" type="submit">Lưu</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    
}
else
{
    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @ErrorMessage
        </div>
    }
}

@code {
    [Parameter]
    public string? So_Phieu_Xuat_Kho { get; set; }
    public string ErrorMessage { get; set; }


    public PhieuXuatKhoModel phieuXuatKho { get; set; } = new();
    public List<KhoModel> listKho { get; set; } = new List<KhoModel>();

    protected override async Task OnParametersSetAsync()
    {
        listKho = await KhoSevice.GetAllKhoAsync(); // Lấy danh sách đơn vị tính từ dịch vụ

        if (So_Phieu_Xuat_Kho is not null)
        {
            var phieuXuat = await PhieuXuatKhoService.GetByIdAsync(So_Phieu_Xuat_Kho);
            if (phieuXuat is not null)
            {
                phieuXuatKho = phieuXuat;
            }
        }
    }

    async Task HandleSubmit()
    {

        if (string.IsNullOrWhiteSpace(phieuXuatKho.So_Phieu_Xuat_Kho))
        {
            await SweetAlert.ShowMessage("Error", "Số phiếu xuất kho không được để trống.", "Error");
            return;
        }

        var existingPNK = await PhieuXuatKhoService.GetByIdAsync(phieuXuatKho.So_Phieu_Xuat_Kho);
        if (existingPNK != null && So_Phieu_Xuat_Kho is null)
        {
            await SweetAlert.ShowMessage("Error", "Số phiếu xuất kho đã tồn tại.", "Error");
            return;
        }

        if (string.IsNullOrWhiteSpace(phieuXuatKho.Kho_ID))
        {
            await SweetAlert.ShowMessage("Error", "Kho không được để trống.", "Error");
            return;
        }

        if (phieuXuatKho.Ngay_Nhap_Kho == default(DateTime))
        {
            await SweetAlert.ShowMessage("Error", "Ngày xuất kho không được để trống.", "Error");
            return;
        }

        if (string.IsNullOrWhiteSpace(phieuXuatKho.Ghi_Chu))
        {
            await SweetAlert.ShowMessage("Error", "Ghi chú không được để trống.", "Error");
            return;
        }
        else
        {
            await PhieuXuatKhoService.AddPhieuXuatKhoAsync(phieuXuatKho);
            await SweetAlert.ShowToast("Thêm thành công!", "Success", 1000);
            nav.NavigateTo("/phieuXuatKho-list");
        }
    }
    private void OnClose(EventArgs e)
    {        
        nav.NavigateTo("/phieuxuatkho-list");
    }
}
