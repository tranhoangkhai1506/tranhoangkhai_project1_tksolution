@page "/edit-phieunhapkho"
@page "/edit-phieunhapkho/{So_Phieu_Nhap_Kho}"
@inject iNhaCungCapService NhaCungCapSevice
@inject iKhoService KhoSevice
@inject iPhieuNhapKhoService PhieuNhapKhoService
@inject NavigationManager nav
@rendermode @(new InteractiveServerRenderMode(prerender:false))

@if (So_Phieu_Nhap_Kho is null)
{
    <PageTitle>Thêm Sản Phẩm</PageTitle>
    <h1>Thêm Sản Phẩm</h1>
    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @ErrorMessage
        </div>
    }

    <EditForm Model="phieuNhapKho" OnSubmit="HandleSubmit">
        <div>
            <label for="So_Phieu_Nhap_Kho">Số Phiếu Nhập Kho</label>
            <InputText id="So_Phieu_Nhap_Kho" @bind-Value="phieuNhapKho.So_Phieu_Nhap_Kho" class="form-control"></InputText>
        </div>
        <div>
            <label for="NCC_ID">Nhà Cung Cấp</label>
            <InputSelect class="form-control" id="NCC_ID" @bind-Value="phieuNhapKho.NCC_ID">
                @foreach (var nhacungcap in listNhaCC)
                {
                    <option value="@nhacungcap.Ma_NCC">@nhacungcap.Ten_NCC</option>
                }
            </InputSelect>
        </div>
        <div>
            <label for="Kho_ID">Kho</label>
            <InputSelect class="form-control" id="Kho_ID" @bind-Value="phieuNhapKho.Kho_ID">
                @foreach (var kho in listKho)
                {
                    <option value="@kho.Ten_Kho">@kho.Ten_Kho</option>
                }
            </InputSelect>
        </div>
        <div>
            <label for="ngayNhapKho">Ngày Nhập Kho</label>
            <InputDate id="ngayNhapKho" @bind-Value="phieuNhapKho.Ngay_Nhap_Kho" class="form-control"></InputDate>
        </div>

        <div>
            <label for="Ghi_Chu">Ghi Chú</label>
            <InputText id="Ghi_Chu" @bind-Value="phieuNhapKho.Ghi_Chu" class="form-control"></InputText>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Lưu</button>
    </EditForm>
}
else
{
    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @ErrorMessage
        </div>
    }
}

@code {
    [Parameter]
    public string? So_Phieu_Nhap_Kho { get; set; }
    public string ErrorMessage { get; set; }


    public PhieuNhapKhoModel phieuNhapKho { get; set; } = new();
    public List<NhaCungCapModel> listNhaCC { get; set; } = new List<NhaCungCapModel>();
    public List<KhoModel> listKho { get; set; } = new List<KhoModel>();

    protected override async Task OnParametersSetAsync()
    {
        listNhaCC = await NhaCungCapSevice.GetAllNhaCungCapAsync(); // Lấy danh sách loại sản phẩm từ dịch vụ
        listKho = await KhoSevice.GetAllKhoAsync(); // Lấy danh sách đơn vị tính từ dịch vụ

        if (So_Phieu_Nhap_Kho is not null)
        {
            var sanPham = await PhieuNhapKhoService.GetByIdAsync(So_Phieu_Nhap_Kho);
            if (sanPham is not null)
            {
                phieuNhapKho = sanPham;
            }
        }
    }

    async Task HandleSubmit()
    {

        if (string.IsNullOrWhiteSpace(phieuNhapKho.So_Phieu_Nhap_Kho))
        {
            ErrorMessage = "Số phiếu nhập kho không được để trống.";
            return;
        }

        var existingPNK = await PhieuNhapKhoService.GetByIdAsync(phieuNhapKho.So_Phieu_Nhap_Kho);
        if (existingPNK != null && So_Phieu_Nhap_Kho is null)
        {
            ErrorMessage = "Số phiếu nhập kho đã tồn tại.";
            return;
        }

        if (string.IsNullOrWhiteSpace(phieuNhapKho.NCC_ID))
        {
            ErrorMessage = "Nhà cung cấp không được để trống.";
            return;
        }

        if (string.IsNullOrWhiteSpace(phieuNhapKho.Kho_ID))
        {
            ErrorMessage = "Kho không được để trống.";
            return;
        }

        if (phieuNhapKho.Ngay_Nhap_Kho == default(DateTime))
        {
            ErrorMessage = "Ngày nhập kho không được để trống.";
            return;
        }

        if (string.IsNullOrWhiteSpace(phieuNhapKho.Ghi_Chu))
        {
            ErrorMessage = "Ghi chú không được để trống.";
            return;
        }
        else
        {
            await PhieuNhapKhoService.AddPhieuNhapKhoAsync(phieuNhapKho);
            nav.NavigateTo("/phieunhapkho-list");
        }
    }
}
