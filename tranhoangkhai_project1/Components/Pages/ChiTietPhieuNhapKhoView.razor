@page "/chitietphieunhapkho-list/{So_Phieu_Nhap_Kho}"
@inject iChiTietPhieuNhapKhoService ChiTietPhieuNhapKhoService
@inject iSanPhamService SanPhamService
@inject IJSRuntime js
@inject ShowErrorMessage SweetAlert
@inject NavigationManager nav
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<PageTitle>CHI TIẾT PHIẾU NHẬP KHO</PageTitle>
<h1 style="text-align: center;"><strong>CHI TIẾT PHIẾU NHẬP KHO</strong></h1>
<hr />
@if (itemCount == 0)
{
    <hr />
    <p>Chưa tìm thấy phiếu nhập kho nào! Vui lòng thêm phiếu nhập kho!</p>
    <button class="btn btn-outline-success" @onclick="@(() =>AddDVT(So_Phieu_Nhap_Kho))">THÊM CHI TIẾT PHIẾU NHẬP KHO</button>
}
else
{
    <div class="page-size-chooser mb-3">
        ITEMS PER PAGE:
        <select class="form-select form-select-sm" style="width: auto; display: inline-block;" @bind="@pagination.ItemsPerPage">
            <option>5</option>
            <option>10</option>
            <option>15</option>
            <option>25</option>
        </select>
    </div>
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <strong>THÔNG TIN PHIẾU CHI TIẾT NHẬP KHO</strong>
            <button class="btn btn-outline-success" @onclick="@(() =>AddDVT(So_Phieu_Nhap_Kho))">THÊM CHI TIẾT PHIẾU NHẬP KHO</button>
        </div>
        <div class="table-responsive">
            <QuickGrid Items="@itemsQueryable" Pagination="@pagination" class="table table-striped table-hover">
                <PropertyColumn Property="@(c => c.Nhap_Kho_ID)" Sortable="true" Title="NHẬP KHO ID" />
                <TemplateColumn Title="SẢN PHẨM" Align="Align.Center">
                    @GetProductName(context)
                </TemplateColumn>
                <PropertyColumn Property="@(c => $"{c.SL_Nhap:0.0}")" Sortable="true" Title="SỐ LƯỢNG" />
                <PropertyColumn Property="@(c => $"{c.Don_Gia_Nhap:0.0}")" Sortable="true" Title="ĐƠN GIÁ" />
                <PropertyColumn Property="@(c => c.SL_Nhap * c.Don_Gia_Nhap)" Format="0.00" Sortable="true" Title="TRỊ GIÁ" />
                <TemplateColumn Title="Actions" Class="text-center">
                    <button class="btn btn-info btn-sm me-1" @onclick="@(() => EditCTPNK(context.Nhap_Kho_ID, context.San_Pham_ID.ToString()))">Hiệu chỉnh</button>
                    <button class="btn btn-danger btn-sm me-1" @onclick="@(() => DeleteCTPNK(context.Nhap_Kho_ID, context.San_Pham_ID.ToString()))">Xóa</button>
                </TemplateColumn>
            </QuickGrid>
        </div>
        <div class="card-footer">
            <div class="hstack gap-3 float-end">
                <div>
                    <button @onclick="@(() => BackToPhieuNhapKhoView())"
                            class="btn btn-outline-danger"
                            aria-label="Go to previous page">
                        Back
                    </button>
                </div>
                <div class="page-buttons d-flex justify-content-around">
                    @if (pagination.TotalItemCount.HasValue)
                    {
                        <div class="btn-group">
                            @for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
                            {
                                var capturedIndex = pageIndex;
                                <button @onclick="@(() => GoToPageAsync(capturedIndex))"
                                        class="@PageButtonClass(capturedIndex) btn btn-secondary mx-1"
                                        aria-current="@AriaCurrentValue(capturedIndex)"
                                        aria-label="Go to page @(pageIndex + 1)">
                                    @(pageIndex + 1)
                                </button>
                            }
                        </div>

                    }
                </div>
            </div>
        </div>
    </div>
}
@code {
    [Parameter]
    public string? So_Phieu_Nhap_Kho { get; set; }
    private int itemCount = 0;
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    List<SanPhamModel> sanPhamList = new List<SanPhamModel>();
    IQueryable<ChiTietPhieuNhapKho>? itemsQueryable;
    protected override async Task OnInitializedAsync()
    {
        sanPhamList = await SanPhamService.GetAllSanPhamAsync();
        itemsQueryable = (await ChiTietPhieuNhapKhoService.GetAllChiTietByKhoIDAsync(So_Phieu_Nhap_Kho)).AsQueryable();
        itemCount = itemsQueryable.Count();
        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? PageButtonClass(int pageIndex)  
        => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;

    void EditCTPNK(string Nhap_Kho_ID, string San_Pham_ID)
    {
        nav.NavigateTo($"/edit-chitietphieunhapkho/{Nhap_Kho_ID}/{San_Pham_ID}");
    }
    void BackToPhieuNhapKhoView()
    {
        nav.NavigateTo("/phieunhapkho-list");
    }
    string GetProductName(dynamic context)
    {
        var unit = sanPhamList.FirstOrDefault(u => u.Id == context.San_Pham_ID);
        return unit?.Ten_San_Pham ?? "N/A";
    }

    async Task AddDVT(string Nhap_Kho_ID)
    {
        nav.NavigateTo($"/edit-chitietphieunhapkho/{Nhap_Kho_ID}");
    }
    async Task DeleteCTPNK(string Nhap_Kho_ID, string San_Pham_ID)
    {
        var confirmed = await js.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn xóa phiếu này?");
        if (confirmed)
        {
            await ChiTietPhieuNhapKhoService.DeleteChiTietPhieuNhapAsync(Nhap_Kho_ID, Convert.ToInt32(San_Pham_ID));
            await SweetAlert.ShowToast("Xóa thành công", "Success", 1000);
            itemsQueryable = (await ChiTietPhieuNhapKhoService.GetAllChiTietByKhoIDAsync(Nhap_Kho_ID)).AsQueryable();
            pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
        }
        
    }
}
