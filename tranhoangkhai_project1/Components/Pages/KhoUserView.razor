@page "/khouser-list"
@inject iKhoUserService KhoUserService
@inject iKhoService KhoService
@inject IJSRuntime js
@inject ShowErrorMessage SweetAlert
@inject NavigationManager nav
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<PageTitle>KHO USER</PageTitle>
<h1 style="text-align: center;"><strong>KHO USER</strong></h1>
<hr />

<div class="container">
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <label for="KhoSelect"><strong>Chọn Kho:</strong></label>
                <select class="form-control" id="KhoSelect" @onchange="HandleKhoSelection">
                    <option value="">Vui lòng chọn kho</option>
                    @foreach (var kho in listKho)
                    {
                        <option value="@kho.KhoId">@kho.Ten_Kho</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-md-6">
            <label for="MaDangNhapInput"><strong>Mã Đăng Nhập Mới:</strong></label>
            <input type="text" class="form-control" id="MaDangNhapInput" @bind="newUserMaDangNhap" placeholder="Nhập mã đăng nhập mới" />
        </div>
        <div class="col-md-2">
            <button class="btn btn-success mt-4" @onclick="AddNewUser">Tạo</button>
        </div>
    </div>


    @if (itemCount == 0)
    {
        <hr />
        <p>Chưa tìm thấy user nào! Vui lòng thêm user!</p>
    }
    else
    {
        <br />
        <h3 style="text-align: left;"><strong>USER</strong></h3>
        <hr />
        <div class="page-size-chooser mb-3">
            ITEMS PER PAGE:
            <select class="form-select form-select-sm" style="width: auto; display: inline-block;" @bind="@pagination.ItemsPerPage">
                <option>5</option>
                <option>10</option>
                <option>15</option>
                <option>25</option>
            </select>
        </div>
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <strong>THÔNG TIN USER</strong>
            </div>
            <div class="table-responsive">
                <QuickGrid Items="@FilteredKho" Pagination="@pagination" class="table table-striped table-hover">
                    <PropertyColumn Property="@(c => c.Ma_Dang_Nhap)" Sortable="true" Align="Align.Center" Title="MÃ ĐĂNG NHẬP">
                        <ColumnOptions>
                            <div class="search-box">
                                <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Mã đăng nhập..." />
                            </div>
                        </ColumnOptions>
                    </PropertyColumn>
                    <TemplateColumn Title="Actions" Class="text-left">
                        <button class="btn btn-info btn-sm me-1" @onclick="@(() => EditKho(context.Ma_Dang_Nhap, context.Kho_ID))">Hiệu chỉnh</button>
                        <button class="btn btn-danger btn-sm me-1" @onclick="@(() => DeleteUser(context.Ma_Dang_Nhap))">Xóa</button>
                    </TemplateColumn>
                </QuickGrid>
            </div>
            <div class="card-footer">
                <div class="hstack gap-3 float-end">
                    <div class="page-buttons d-flex justify-content-around">
                        @if (pagination.TotalItemCount.HasValue)
                        {
                            <div class="btn-group">
                                @for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
                                {
                                    var capturedIndex = pageIndex;
                                    <button @onclick="@(() => GoToPageAsync(capturedIndex))"
                                            class="@PageButtonClass(capturedIndex) btn btn-secondary mx-1"
                                            aria-current="@AriaCurrentValue(capturedIndex)"
                                            aria-label="Go to page @(pageIndex + 1)">
                                        @(pageIndex + 1)
                                    </button>
                                }
                            </div>

                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>
    
@code {
    private List<KhoModel> listKho = new List<KhoModel>();
    private string selectedKhoId;
    private string newUserMaDangNhap;
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    IQueryable<KhoUserModel>? itemsQueryable;
    private int itemCount = 0;
    string nameFilter;
    IQueryable<KhoUserModel> FilteredKho
    {
        get
        {
            var result = itemsQueryable;
            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = itemsQueryable.Where(c => c.Ma_Dang_Nhap.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            return result;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        listKho = await KhoService.GetAllKhoAsync();
    }

    async Task HandleKhoSelection(ChangeEventArgs e)
    {
        selectedKhoId = e.Value.ToString();
        if (!string.IsNullOrEmpty(selectedKhoId))
        {
            itemsQueryable = (await KhoUserService.GetUsersByKhoIdAsync(int.Parse(selectedKhoId))).AsQueryable();
            itemCount = itemsQueryable.Count();
            pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
        }
    }
    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? PageButtonClass(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;
    async Task AddNewUser()
    {
        if (selectedKhoId is null)
        {
            await SweetAlert.ShowToast("Vui lòng chọn kho!", "Error", 1000);
            return;
        }
        else
        {
            var dbUserExisting = await KhoUserService.GetByIdAsync(int.Parse(selectedKhoId), newUserMaDangNhap);
            if (dbUserExisting is not null)
            {
                await SweetAlert.ShowToast("Mã đăng nhập đã tồn tại!", "Error", 1000);
                return;
            } 
        }
       
        if (!string.IsNullOrWhiteSpace(newUserMaDangNhap) && !string.IsNullOrWhiteSpace(selectedKhoId))
        {
            await KhoUserService.AddKhoUser(new KhoUserModel { Ma_Dang_Nhap = newUserMaDangNhap, Kho_ID = int.Parse(selectedKhoId) });
            newUserMaDangNhap = string.Empty;
            itemsQueryable = (await KhoUserService.GetUsersByKhoIdAsync(int.Parse(selectedKhoId))).AsQueryable();
            itemCount = itemsQueryable.Count();
            pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
            await SweetAlert.ShowToast("Thêm thành công!", "Success", 1000);
        }
        else
        {
            await SweetAlert.ShowToast("Vui lòng nhập mã đăng nhập!", "Error", 1000);
            return;
        }
    }

    async Task DeleteUser(string maDangNhap)
    {
        await KhoUserService.DeleteKhoUserAsync(int.Parse(selectedKhoId), maDangNhap);
        itemsQueryable = (await KhoUserService.GetUsersByKhoIdAsync(int.Parse(selectedKhoId))).AsQueryable();
        itemCount = itemsQueryable.Count();
        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
        await SweetAlert.ShowToast("Xóa thành công!", "Success", 1000);
    }

    async void EditKho(string maDangNhap, int khoID)
    {
        nav.NavigateTo($"/edit-khouser/{khoID}/{maDangNhap}");
    }
}
