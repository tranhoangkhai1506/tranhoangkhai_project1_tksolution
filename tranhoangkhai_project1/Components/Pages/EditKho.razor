@page "/edit-kho"
@page "/edit-kho/{tenKho}"

@inject iKhoService KhoService
@inject IJSRuntime js
@inject ShowErrorMessage SweetAlert
@inject NavigationManager nav
@rendermode @(new InteractiveServerRenderMode(prerender:false))

@if (TenKho is null)
{
    <PageTitle>THÊM KHO</PageTitle>

    <h1 style="text-align: center;"><strong>THÊM KHO</strong></h1>
    <hr />

    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @ErrorMessage
        </div>
    }
    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-6">
                <div class="card">
                    <div class="card-header"><strong>THÔNG TIN KHO</strong></div>
                    <div class="card-body">
                        <EditForm Model="CurrentKho" OnSubmit="HandleSubmit">
                            <div>
                                <label for="Ten_Kho">Tên Kho</label>
                                <InputText id="Ten_Kho" @bind-Value="CurrentKho.Ten_Kho" class="form-control"></InputText>
                            </div>
                            <div>
                                <label for="Ghi_Chu">Ghi Chú</label>
                                <InputText id="Ghi_Chu" @bind-Value="CurrentKho.Ghi_Chu" class="form-control"></InputText>
                            </div>
                        </EditForm>
                    </div>
                    <div class="card-footer">
                        <div class="hstack gap-3 float-end">
                            <form method="dialog">
                                <button class="btn btn-danger" @onclick="OnClose">Close</button>
                            </form>
                            <button class="btn btn-success" @onclick="HandleSubmit" type="submit">Lưu</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div> 
}
else
{
    <PageTitle>SỬA KHO</PageTitle>

    <h1 style="text-align: center;"><strong>SỬA KHO</strong></h1>
    <hr />
    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @ErrorMessage
        </div>
    }

    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-6">
                <div class="card">
                    <div class="card-header"><strong>THÔNG TIN LOẠI SẢN PHẨM</strong></div>
                    <div class="card-body">
                        <EditForm Model="CurrentKho" OnSubmit="HandleSubmit">
                            <div>
                                <label for="Ten_Kho">Tên Kho</label>
                                <InputText id="Ten_Kho" @bind-Value="CurrentKho.Ten_Kho" class="form-control"></InputText>
                            </div>
                            <div>
                                <label for="Ghi_Chu">Ghi Chú</label>
                                <InputText id="Ghi_Chu" @bind-Value="CurrentKho.Ghi_Chu" class="form-control"></InputText>
                            </div>
                        </EditForm>
                    </div>
                    <div class="card-footer">
                        <div class="hstack gap-3 float-end">
                            <form method="dialog">
                                <button class="btn btn-danger" @onclick="OnClose">Close</button>
                            </form>
                            <button class="btn btn-success" @onclick="HandleSubmit" type="submit">Lưu</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>   
}

@code {
    [Parameter]
    public string? TenKho { get; set; }
    public string ErrorMessage { get; set; }
    public KhoModel CurrentKho { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        if (TenKho is not null)
        {
            var dvt = await KhoService.GetByIdAsync(TenKho);
            if (dvt is not null)
            {
                CurrentKho = dvt;
            }
        }
    }

    async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(CurrentKho.Ten_Kho))
        {
            ErrorMessage = "Tên kho tính không được để trống.";
            return;
        }

        var existingUnitCode = await KhoService.GetByIdAsync(CurrentKho.Ten_Kho);
        if (existingUnitCode != null && TenKho is null)
        {
            ErrorMessage = "Tên kho đã tồn tại.";
            return;
        }
        if (string.IsNullOrWhiteSpace(CurrentKho.Ghi_Chu))
        {
            ErrorMessage = "Ghi chú không được để trống.";
            return;
        }

        if (TenKho is not null)
        {
            await KhoService.UpdateKhoAsync(CurrentKho, TenKho);
            await SweetAlert.ShowToast("Sửa thành công!", "Success", 1000);
            nav.NavigateTo("/kho-list");
        }
        else
        {
            await KhoService.AddKho(CurrentKho);
            await SweetAlert.ShowToast("Thêm thành công!", "Success", 1000);
            nav.NavigateTo("/kho-list");
        }
    }
    private void OnClose(EventArgs e)
    {
        ClearPhieuContainer();
        nav.NavigateTo("/kho-list");
    }
    public void ClearPhieuContainer()
    {
        CurrentKho = new();
    }
}
