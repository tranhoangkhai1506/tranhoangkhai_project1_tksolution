@page "/edit-sanpham"
@page "/edit-sanpham/{maSanPham}"
@inject iSanPhamService SanPhamSevice
@inject iLoaiSanPhamService LoaiSanPhamSevice
@inject iDonViTinhService DonViTinhSevice
@inject NavigationManager nav
@rendermode @(new InteractiveServerRenderMode(prerender:false))

@if (maSanPham is null)
{
    <PageTitle>Thêm Sản Phẩm</PageTitle>
    <h1>Thêm Sản Phẩm</h1>
    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @ErrorMessage
        </div>
    }


    <EditForm Model="CurrentSP" OnSubmit="HandleSubmit">
        <div>
            <label for="Ma_San_Pham">Mã Sản Phẩm</label>
            <InputText id="Ma_San_Pham" @bind-Value="CurrentSP.Ma_San_Pham" class="form-control"></InputText>
        </div>
        <div>
            <label for="Ten_San_Pham">Tên Sản Phẩm</label>
            <InputText id="Ten_San_Pham" @bind-Value="CurrentSP.Ten_San_Pham" class="form-control"></InputText>
        </div>
        <div>
            <label for="Loai_San_Pham_ID">Loại Sản Phẩm</label>
            <InputSelect class="form-control" id="Loai_San_Pham_ID" @bind-Value="CurrentSP.Loai_San_Pham_ID">
                <option value="" disabled selected>Chọn loại sản phẩm nhập kho</option>
                @foreach (var loaiSanPham in danhSachLoaiSanPham)
                {
                    <option value="@loaiSanPham.Ma_LSP">@loaiSanPham.Ma_LSP</option>
                }
            </InputSelect>
        </div>

        <div>
            <label for="Don_Vi_Tinh_ID">Đơn Vị Tính</label>
            <InputSelect class="form-control" id="Don_Vi_Tinh_ID" @bind-Value="CurrentSP.Don_Vi_Tinh_ID">
                <option value="" disabled selected>Chọn đơn vị tính</option>
                @foreach (var donViTinh in danhSachDonViTinh)
                {
                    <option value="@donViTinh.Ten_Don_Vi_Tinh">@donViTinh.Ten_Don_Vi_Tinh</option>
                }
            </InputSelect>
            
        </div>       
        <div>
            <label for="Ghi_Chu">Ghi Chú</label>
            <InputText id="Ghi_Chu" @bind-Value="CurrentSP.Ghi_Chu" class="form-control"></InputText>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Lưu</button>
    </EditForm>
}
else
{
    <PageTitle>Chỉnh sửa "@CurrentSP."</PageTitle>
    <h3>Chỉnh sửa "@CurrentSP.Ten_San_Pham"</h3>
    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @ErrorMessage
        </div>
    }


    <EditForm Model="CurrentSP" OnSubmit="HandleSubmit">
        <div>
            <label for="Ten_San_Pham">Tên Sản Phẩm</label>
            <InputText  id="Ten_San_Pham" @bind-Value="CurrentSP.Ten_San_Pham" class="form-control"></InputText>
        </div>
        <div>
            <label for="Loai_San_Pham_ID">Loại Sản Phẩm</label>
            <InputSelect class="form-control" id="Loai_San_Pham_ID" @bind-Value="CurrentSP.Loai_San_Pham_ID">
                @foreach (var loaiSanPham in danhSachLoaiSanPham)
                {
                    <option value="@loaiSanPham.Ma_LSP">@loaiSanPham.Ten_LSP</option>
                }
            </InputSelect>
            
        </div>       
        <div>
            <label for="Don_Vi_Tinh_ID">Đơn Vị Tính</label>
            <InputSelect class="form-control" id="Don_Vi_Tinh_ID" @bind-Value="CurrentSP.Don_Vi_Tinh_ID">
                @foreach (var donViTinh in danhSachDonViTinh)
                {
                    <option value="@donViTinh.Ten_Don_Vi_Tinh">@donViTinh.Ten_Don_Vi_Tinh</option>
                }
            </InputSelect>
        </div>
        <div>
            <label for="Ghi_Chu">Ghi Chú</label>
            <InputText id="Ghi_Chu" @bind-Value="CurrentSP.Ghi_Chu" class="form-control"></InputText>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Lưu</button>
    </EditForm>
}

@code {
    [Parameter]
    public string? maSanPham { get; set; }
    public string ErrorMessage { get; set; }


    public SanPhamModel CurrentSP { get; set; } = new();
    public List<LoaiSanPhamModel> danhSachLoaiSanPham { get; set; } = new List<LoaiSanPhamModel>();
    public List<DonViTinhModel> danhSachDonViTinh { get; set; } = new List<DonViTinhModel>();

    protected override async Task OnParametersSetAsync()
    {
        danhSachLoaiSanPham = await LoaiSanPhamSevice.GetAllLoaiSanPhamAsync(); // Lấy danh sách loại sản phẩm từ dịch vụ
        danhSachDonViTinh = await DonViTinhSevice.GetAllDonViTinhAsync(); // Lấy danh sách đơn vị tính từ dịch vụ

        if (maSanPham is not null)
        {
            var sanPham = await SanPhamSevice.GetByIdAsync(maSanPham);
            if (sanPham is not null)
            {
                CurrentSP = sanPham;
            }
        }
    }

    async Task HandleSubmit()
    {

        if (string.IsNullOrWhiteSpace(CurrentSP.Ma_San_Pham))
        {
            ErrorMessage = "Mã sản phẩm không được để trống.";
            return;
        }

        var existingProduct = await SanPhamSevice.GetByIdAsync(CurrentSP.Ma_San_Pham);
        if (existingProduct != null && maSanPham is null)
        {
            ErrorMessage = "Mã sản phẩm đã tồn tại.";
            return;
        }

        if (string.IsNullOrWhiteSpace(CurrentSP.Loai_San_Pham_ID))
        {
            ErrorMessage = "Loại sản phẩm không được để trống.";
            return;
        }

        if (string.IsNullOrWhiteSpace(CurrentSP.Ten_San_Pham))
        {
            ErrorMessage = "Tên sản phẩm không được để trống.";
            return;
        }

        if (string.IsNullOrWhiteSpace(CurrentSP.Don_Vi_Tinh_ID))
        {
            ErrorMessage = "Đơn vị tính không được để trống.";
            return;
        }
        if (string.IsNullOrWhiteSpace(CurrentSP.Ghi_Chu))
        {
            ErrorMessage = "Ghi chú không được để trống.";
            return;
        }

        // Nếu không có lỗi, tiến hành cập nhật hoặc thêm mới sản phẩm
        if (maSanPham is not null)
        {
            await SanPhamSevice.UpdateSanPhamAsync(CurrentSP, maSanPham);
            nav.NavigateTo("/sanpham-list");
        }
        else
        {
            await SanPhamSevice.AddSanPham(CurrentSP);
            nav.NavigateTo("/sanpham-list");
        }
    }
}
