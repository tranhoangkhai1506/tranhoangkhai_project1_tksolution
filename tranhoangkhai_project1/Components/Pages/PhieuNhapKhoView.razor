@page "/phieunhapkho-list"
@inject iPhieuNhapKhoService PhieuNhapKhoService
@inject iKhoService KhoService
@inject iNhaCungCapService NhaCungCapService
@inject iChiTietPhieuNhapKhoService ChiTietPhieuNhapKhoService
@inject IJSRuntime js
@inject ShowErrorMessage SweetAlert
@inject NavigationManager nav
@rendermode @(new InteractiveServerRenderMode(prerender:false))
<script src="~/js/dialog.js"></script>
<PageTitle>PHIẾU NHẬP KHO</PageTitle>
<h1 style="text-align: center;"><strong>PHIẾU NHẬP KHO</strong></h1>
<hr />

@if (itemCount == 0)
{
    <hr />
    <p>Chưa tìm thấy phiếu nhập kho nào! Vui lòng thêm phiếu nhập kho!</p>
    <button class="btn btn-outline-success" @onclick="AddPhieuNhapHang">THÊM PHIẾU NHẬP KHO</button>
}
else
{
    <div class="page-size-chooser mb-3">
        ITEMS PER PAGE:
        <select class="form-select form-select-sm" style="width: auto; display: inline-block;" @bind="@pagination.ItemsPerPage">
            <option>5</option>
            <option>10</option>
            <option>15</option>
            <option>25</option>
        </select>
    </div>
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <strong>THÔNG TIN PHIẾU NHẬP KHO</strong>
            <button class="btn btn-outline-success" @onclick="AddPhieuNhapHang">THÊM PHIẾU NHẬP KHO</button>
        </div>
        <div class="table-responsive">
            <QuickGrid Items="@FilteredPhieuNhapKho" Pagination="@pagination" class="table table-striped table-hover">
                <PropertyColumn Property="@(c => c.So_Phieu_Nhap_Kho)" Sortable="true" Class="country-name" Title="MÃ PHIẾU">
                    <ColumnOptions>
                        <div class="search-box">
                            <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Mã phiếu..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <TemplateColumn Title="KHO" Align="Align.Center">
                    @GetKhoName(context)
                </TemplateColumn>
                <TemplateColumn Title="NHÀ CUNG CẤP" Align="Align.Center">
                    @GetTenNhaCC(context)
                </TemplateColumn>
                <PropertyColumn Property="@(c => c.Ngay_Nhap_Kho)" Sortable="true" Class="text-right date-column" Title="NGÀY NHẬP" Format="dd-MM-yyyy" />
                <PropertyColumn Property="@(c => c.Ghi_Chu)" Sortable="true" Class="text-right" Title="GHI CHÚ" />
                <TemplateColumn Title="Actions" Class="text-right">
                    <button class="btn btn-outline-success btn-sm me-1" @onclick="@(() => ChiTiet(context.So_Phieu_Nhap_Kho))">Chi tiết</button>
                    <button class="btn btn-info btn-sm me-1" @onclick="@(() => HieuChinh(context.So_Phieu_Nhap_Kho))">Sửa</button>
                    <button class="btn btn-danger btn-sm me-1" @onclick="@(() => DeletePhieuNhapKho(context.So_Phieu_Nhap_Kho))">Xóa</button>
                    @* <button class="btn btn-primary btn-sm me-1" @onclick="@(() => ShowReportByID(context.So_Phieu_Nhap_Kho))">Xem Report</button> *@
                    <button class="btn btn-secondary btn-sm" @onclick="@(() => Print(context.So_Phieu_Nhap_Kho))">In</button>
                </TemplateColumn>
            </QuickGrid>
        </div>
        <div class="card-footer">
            <div class="hstack gap-3 float-end">
                <div class="page-buttons d-flex justify-content-around">
                    @if (pagination.TotalItemCount.HasValue)
                    {
                        <div class="btn-group">
                            @for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
                            {
                                var capturedIndex = pageIndex;
                                <button @onclick="@(() => GoToPageAsync(capturedIndex))"
                                        class="@PageButtonClass(capturedIndex) btn btn-secondary mx-1"
                                        aria-current="@AriaCurrentValue(capturedIndex)"
                                        aria-label="Go to page @(pageIndex + 1)">
                                    @(pageIndex + 1)
                                </button>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}

<div id="PrintDiv" style="display: none;">
    @if (currentReportId != null)
    {
        @DynamicComponent(currentReportId)
    }
</div>

@code {
    private int itemCount = 0;
    bool showName = true;
    bool showBirthDate = false;
    private string ErrorMessage { get; set; }
    private string currentReportId;
    public List<KhoModel> danhSachKho { get; set; } = new List<KhoModel>();
    public List<NhaCungCapModel> danhSachNCC { get; set; } = new List<NhaCungCapModel>();
    PhieuNhapKhoModel phieuNhapKho = new();
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    IQueryable<PhieuNhapKhoModel>? itemsQueryable;
    string nameFilter;
    IQueryable<PhieuNhapKhoModel> FilteredPhieuNhapKho
    {
        get
        {
            var result = itemsQueryable;
            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = itemsQueryable.Where(c => c.So_Phieu_Nhap_Kho.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }

            return result;
        }
    }
    private async Task ChiTiet(string So_Phieu_Nhap_Kho)
    {
        nav.NavigateTo($"/chitietphieunhapkho-list/{So_Phieu_Nhap_Kho}");
    }


    protected override async Task OnInitializedAsync()
    {
        danhSachKho = await KhoService.GetAllKhoAsync();
        danhSachNCC = await NhaCungCapService.GetAllNhaCungCapAsync();
        itemsQueryable = (await PhieuNhapKhoService.GetAlPhieuNhapKhoAsync()).AsQueryable();
        itemCount = itemsQueryable.Count();
        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    private async Task DeletePhieuNhapKho(string maphieu)
    {
        var chitietPhieuXuat = await ChiTietPhieuNhapKhoService.GetAllChiTietByKhoIDAsync(maphieu);
        if (chitietPhieuXuat.Count() != 0)
        {
            var confirmed = await js.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn xóa phiếu này?");
            if (confirmed)
            {
                foreach (var i in chitietPhieuXuat)
                {
                    await ChiTietPhieuNhapKhoService.DeleteChiTietPhieuNhapAsync(i.Nhap_Kho_ID,i.San_Pham_ID);
                }
                await PhieuNhapKhoService.DeletePhieuNhapKhoAsync(maphieu);
                itemsQueryable = (await PhieuNhapKhoService.GetAlPhieuNhapKhoAsync()).AsQueryable();
                await SweetAlert.ShowToast("Xóa thành công", "Success", 1000);
                pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
            }
        }
        else
        {
            var confirmed = await js.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn xóa phiếu này?");
            if (confirmed)
            {
                await PhieuNhapKhoService.DeletePhieuNhapKhoAsync(maphieu);
                itemsQueryable = (await PhieuNhapKhoService.GetAlPhieuNhapKhoAsync()).AsQueryable();
                await SweetAlert.ShowToast("Xóa thành công", "Success", 1000);
                pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
            }
        }
    }
    string GetKhoName(dynamic context)
    {
        var unit = danhSachKho.FirstOrDefault(u => u.KhoId == context.Kho_ID);
        return unit?.Ten_Kho ?? "N/A";
    }

    string GetTenNhaCC(dynamic context)
    {
        var loaiSanPham = danhSachNCC.FirstOrDefault(l => l.Id == context.NCC_ID);
        return loaiSanPham?.Ten_NCC ?? "N/A";
    }

    private async void HieuChinh(string So_Phieu_Nhap_Kho)
    {
        nav.NavigateTo($"/edit-phieunhapkho/{So_Phieu_Nhap_Kho}");
    }

    private async void AddPhieuNhapHang()
    {
        nav.NavigateTo($"/edit-phieunhapkho");
    }

    private RenderFragment DynamicComponent(string reportId) => builder =>
    {
        builder.OpenComponent(0, typeof(PhieuNhapKhoReportViewer));
        builder.AddAttribute(1, "So_Phieu_Nhap_Kho", reportId);
        builder.SetKey(reportId); // Đặt key để Blazor nhận biết sự thay đổi
        builder.CloseComponent();
    };


    private async Task ShowReportByID(string So_Phieu_Nhap_Kho)
    {
        currentReportId = So_Phieu_Nhap_Kho;
        await InvokeAsync(StateHasChanged);
    }

    private async Task Print(string So_Phieu_Nhap_Kho)
    {
        var chitietPhieuNhapKho = await ChiTietPhieuNhapKhoService.GetChiTietByKhoIDAsync(So_Phieu_Nhap_Kho);
        if (chitietPhieuNhapKho is not null)
        {
            ErrorMessage = "";
            currentReportId = So_Phieu_Nhap_Kho;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(300); // Đảm bảo có đủ thời gian cho việc render lại UI
            await js.InvokeVoidAsync("PrintPhieuNhapKhoReport");
        }
        else
        {
            await SweetAlert.ShowMessage("Error", "Không có chi tiết nào cho phiếu nhập!", "Error");
        }
        
    }
    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? PageButtonClass(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;

    private async Task ShowDiaLog()
    {
        await js.InvokeVoidAsync("myDialogFunction");
    }
}

<script type="text/javascript">
    function PrintPhieuNhapKhoReport() {
        var printDivContent = document.getElementById("PrintDiv").innerHTML;
        var windowToPrint = window.open('', '', 'height=600,width=800');
        windowToPrint.document.write('<html><head><title>Print</title></head>');
        windowToPrint.document.write('<body>');
        windowToPrint.document.write(printDivContent);
        windowToPrint.document.write('</body></html>');
        windowToPrint.document.close();
        windowToPrint.focus();
        setTimeout(function () {
            windowToPrint.print();
            windowToPrint.onafterprint = function () { windowToPrint.close(); };
        }, 500); // Đảm bảo báo cáo được load đầy đủ trước khi in
    }
</script>

