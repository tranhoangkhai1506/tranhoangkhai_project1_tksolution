@page "/phieunhapkho-list"
@inject iPhieuNhapKhoService PhieuNhapKhoService
@inject iHieuChinhPhieuNhapKhoService HieuChinhPhieuNhapKhoService
@inject IJSRuntime js
@inject NavigationManager nav
@rendermode @(new InteractiveServerRenderMode(prerender:false))
<script src="~/js/dialog.js"></script>
<PageTitle>PHIẾU NHẬP KHO</PageTitle>
<h1>PHIẾU NHẬP KHO</h1>
<hr />
<button class="btn btn-primary" @onclick="AddPhieuNhapHang">Thêm phiếu nhập kho</button>

<EditPhieuNhapKhoDialog 
    HandleAddPhieuNhapKhoEvent="HandleAddPhieuNhapKhoEvent" 
    phieuNhapKho="phieuNhapKho"
@ref="dialogPhieuNhapKho">

</EditPhieuNhapKhoDialog>

@if (itemsQueryable is null)
{
    <p>Chưa có phiếu nhập kho nào. Vui lòng thêm phiếu nhập kho mới.</p>
}
else
{
    @* <p>
        Show:
        <label><input type="checkbox" @bind="showName" /> Name</label>
        <label><input type="checkbox" @bind="showBirthDate" /> Birth date</label>
    </p> *@
    <hr />
    <div class="page-size-chooser mb-3">
        Items per page:
        <select class="form-select form-select-sm" style="width: auto; display: inline-block;" @bind="@pagination.ItemsPerPage">
            <option>3</option>
            <option>5</option>
            <option>10</option>
            <option>15</option>
        </select>
    </div>

    <div class="table-responsive">
        <QuickGrid Items="@itemsQueryable" Pagination="@pagination" class="table table-striped table-hover">
            <PropertyColumn Property="@(c => c.So_Phieu_Nhap_Kho)" Sortable="true" Class="text-center" Title="MÃ PHIẾU"/>
            <PropertyColumn Property="@(c => c.Kho_ID)" Sortable="true" Class="text-center" Title="KHO" />
            <PropertyColumn Property="@(c => c.NCC_ID)" Sortable="true" Class="text-center" Title="NHÀ CUNG CẤP" />
            <PropertyColumn Property="@(c => c.Ngay_Nhap_Kho)" Sortable="true" Class="text-center date-column" Title="NGÀY NHẬP" Format="dd-MM-yyyy"/>
            <PropertyColumn Property="@(c => c.Ghi_Chu)" Sortable="true" Class="text-center" Title="GHI CHÚ" />
            <TemplateColumn Title="Actions" Class="text-center">
                <button class="btn btn-outline-success btn-sm me-1" @onclick="@(() => ChiTiet(context.So_Phieu_Nhap_Kho))">Chi tiết</button>
                <button class="btn btn-info btn-sm me-1" @onclick="@(() => HieuChinh(context))">Sửa</button>
                <button class="btn btn-danger btn-sm me-1" @onclick="@(() => ConfirmDelete(context.So_Phieu_Nhap_Kho))">Xóa</button>
                @* <button class="btn btn-primary btn-sm me-1" @onclick="@(() => ShowReportByID(context.So_Phieu_Nhap_Kho))">Xem Report</button> *@
                <button class="btn btn-secondary btn-sm" @onclick="@(() => Print(context.So_Phieu_Nhap_Kho))">In</button>
            </TemplateColumn>
        </QuickGrid>
    </div>
   @*  <Paginator State="@pagination" /> *@
    <div class="page-buttons d-flex justify-content-around">
        Page:
        @if (pagination.TotalItemCount.HasValue)
        {
            <div class="btn-group">
                @for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
            {
                var capturedIndex = pageIndex;
                <button @onclick="@(() => GoToPageAsync(capturedIndex))"
                        class="@PageButtonClass(capturedIndex) btn btn-secondary mx-1"
                        aria-current="@AriaCurrentValue(capturedIndex)"
                        aria-label="Go to page @(pageIndex + 1)">
                    @(pageIndex + 1)
                </button>
            }
            </div>
            
        }
    </div>

}
<hr />

<div id="PrintDiv">
    @if (currentReportId != null)
    {
        @DynamicComponent(currentReportId)
    }
</div>

@code {
    bool showName = true;
    bool showBirthDate = false;
    private string ErrorMessage { get; set; }
    private string currentReportId;
    EditPhieuNhapKhoDialog? dialogPhieuNhapKho;
    PhieuNhapKhoModel phieuNhapKho = new();
    PaginationState pagination = new PaginationState { ItemsPerPage = 3 };
    IQueryable<PhieuNhapKhoModel>? itemsQueryable;

    private async Task ChiTiet(string So_Phieu_Nhap_Kho)
    {
        nav.NavigateTo($"/chitietphieunhapkho-list/{So_Phieu_Nhap_Kho}");
    }

    private async void HandleAddPhieuNhapKhoEvent(PhieuNhapKhoModel comingPhieuNhapKho)
    {
        var check = itemsQueryable.FirstOrDefault(p => p.So_Phieu_Nhap_Kho.Equals(comingPhieuNhapKho.So_Phieu_Nhap_Kho));
        if(check is null)
        {
            await PhieuNhapKhoService.AddPhieuNhapKhoAsync(comingPhieuNhapKho);
            phieuNhapKho = new();
            itemsQueryable = (await PhieuNhapKhoService.GetAlPhieuNhapKhoAsync()).AsQueryable();
            pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
        }
        else
        {
            HieuChinhPhieuNhapKhoModel newHieuChinh = new HieuChinhPhieuNhapKhoModel();
            newHieuChinh.So_Phieu_Nhap_Kho = phieuNhapKho.So_Phieu_Nhap_Kho;
            newHieuChinh.Kho_ID = phieuNhapKho.Kho_ID;
            newHieuChinh.NCC_ID = phieuNhapKho.NCC_ID;
            newHieuChinh.Ngay_Nhap_Kho = phieuNhapKho.Ngay_Nhap_Kho;
            newHieuChinh.Ghi_Chu = phieuNhapKho.Ghi_Chu;
            await HieuChinhPhieuNhapKhoService.UpdateHieuChinhPhieuNhapKhoAsync(newHieuChinh, phieuNhapKho.So_Phieu_Nhap_Kho);
            phieuNhapKho = new();
            itemsQueryable = (await PhieuNhapKhoService.GetAlPhieuNhapKhoAsync()).AsQueryable();
            pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        itemsQueryable = (await PhieuNhapKhoService.GetAlPhieuNhapKhoAsync()).AsQueryable();
        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    private async Task ConfirmDelete(string maphieu)
    {
        var confirmed = await js.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn xóa phiếu này?");
        if (confirmed)
        {
            await DeletePhieuNhapKho(maphieu);
        }
    }

    private async Task DeletePhieuNhapKho(string maphieu)
    {
        var hieuchinhPhieuNhapKho = await HieuChinhPhieuNhapKhoService.GetByIdAsync(maphieu);
        if (hieuchinhPhieuNhapKho is null)
        {
            await PhieuNhapKhoService.DeletePhieuNhapKhoAsync(maphieu);
            itemsQueryable = (await PhieuNhapKhoService.GetAlPhieuNhapKhoAsync()).AsQueryable();
            pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
        }
        else
        {
            ErrorMessage = "Không thể xóa phiếu nhập!";
        }
    }

    private async void HieuChinh(PhieuNhapKhoModel phieuNhap)
    {
        dialogPhieuNhapKho.ChangeTitle("SỬA");
        dialogPhieuNhapKho.IsUpdateMode = true;
        phieuNhapKho = phieuNhap;
        await ShowDiaLog();
    }

    private async void AddPhieuNhapHang()
    {
        dialogPhieuNhapKho.IsUpdateMode = false;
        await ShowDiaLog();
    }

    private RenderFragment DynamicComponent(string reportId) => builder =>
    {
        builder.OpenComponent(0, typeof(PhieuNhapKhoReportViewer));
        builder.AddAttribute(1, "So_Phieu_Nhap_Kho", reportId);
        builder.SetKey(reportId); // Đặt key để Blazor nhận biết sự thay đổi
        builder.CloseComponent();
    };


    private async Task ShowReportByID(string So_Phieu_Nhap_Kho)
    {
        currentReportId = So_Phieu_Nhap_Kho;
        await InvokeAsync(StateHasChanged);
    }

    private async Task Print(string So_Phieu_Nhap_Kho)
    {
        currentReportId = So_Phieu_Nhap_Kho;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(300); // Đảm bảo có đủ thời gian cho việc render lại UI
        await js.InvokeVoidAsync("PrintPhieuNhapKhoReport");
    }
    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? PageButtonClass(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;

    private async Task ShowDiaLog()
    {
        await js.InvokeVoidAsync("myDialogFunction");
    }
}

<script type="text/javascript">
    function PrintPhieuNhapKhoReport() {
        var printDivContent = document.getElementById("PrintDiv").innerHTML;
        var windowToPrint = window.open('', '', 'height=600,width=800');
        windowToPrint.document.write('<html><head><title>Print</title></head>');
        windowToPrint.document.write('<body>');
        windowToPrint.document.write(printDivContent);
        windowToPrint.document.write('</body></html>');
        windowToPrint.document.close();
        windowToPrint.focus();
        setTimeout(function () {
            windowToPrint.print();
            windowToPrint.onafterprint = function () { windowToPrint.close(); };
        }, 500); // Đảm bảo báo cáo được load đầy đủ trước khi in
    }
    window.myDialogFunction = function () {
        document.getElementById('editPhieuNhapPhong').showModal()
    }
</script>

