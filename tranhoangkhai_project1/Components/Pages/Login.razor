@page "/login/{tenKho}"
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthenticationService
@inject IJSRuntime js
@inject ShowErrorMessage SweetAlert
@inject NavigationManager nav
@rendermode @(new InteractiveServerRenderMode(prerender:false))
<h1 style="text-align: center;"><strong>ĐĂNG NHẬP</strong></h1>
<hr />

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-4">
            <div class="card">
                <div class="card-header text-center"><strong>ĐĂNG NHẬP</strong></div>
                <div class="card-body">
                    <EditForm Model="loginModel" OnValidSubmit="@HandleLogin">
                        <div class="mb-3">
                            <label for="Ma_Dang_Nhap" class="form-label"><strong>MÃ ĐĂNG NHẬP</strong></label>
                            <InputText id="Ma_Dang_Nhap" @bind-Value="loginModel.Ma_Dang_Nhap" class="form-control" />
                        </div>
                    </EditForm>
                </div>
                <div class="card-footer text-end">
                    <button class="btn btn-danger" @onclick="OnClose">TRỞ VỀ</button>
                    <button class="btn btn-success" @onclick="HandleLogin">ĐĂNG NHẬP</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? tenKho { get; set; }
    private KhoUserModel loginModel = new KhoUserModel();
    private string errorMessage = "";

    protected override async Task OnParametersSetAsync()
    {
        if (tenKho is not null)
        {
            loginModel.Kho_ID = tenKho;
        }
    }

    private async Task HandleLogin()
    {
        if (string.IsNullOrWhiteSpace(loginModel.Ma_Dang_Nhap))
        {
            await SweetAlert.ShowMessage("Error", "Mã đăng nhập không được để trống.", "Error");
        }
        else
        {
            await AuthenticationService.LoginAsync(loginModel.Ma_Dang_Nhap, loginModel.Kho_ID);
            bool isAuthenticated = IsAuthStatic.IsAuthenticated;
            if (isAuthenticated)
            {
                NavigationManager.NavigateTo("/kho-list");
            }
            else
            {
                await SweetAlert.ShowMessage("Error", "Đăng nhập không thành công. Vui lòng kiểm tra mã đăng nhập.", "Error");
            }
        }        
    }
    private void OnClose(EventArgs e)
    {
        nav.NavigateTo("/kho-list");
    }  
}
