@page "/chitietphieuxuatkho-list/{So_Phieu_Xuat_Kho}"
@inject iChiTietPhieuXuatKhoService ChiTietPhieuXuatKhoService
@inject IJSRuntime js
@inject ShowErrorMessage SweetAlert
@inject NavigationManager nav
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<PageTitle>CHI TIẾT PHIẾU NHẬP KHO</PageTitle>
<h1>CHI TIẾT PHIẾU NHẬP KHO</h1>
<hr />
<button class="btn btn-primary" @onclick="@(() =>AddChiTietPhieuXuatKho(So_Phieu_Xuat_Kho))">Thêm chi tiết</button>
@if (itemCount == 0)
{
    <hr />
    <p>Chưa tìm thấy chi tiết phiếu xuất nào! Vui lòng thêm chi tiết phiếu xuất!</p>
}
else
{
    <hr />
    <div class="page-size-chooser mb-3">
        Items per page:
        <select class="form-select form-select-sm" style="width: auto; display: inline-block;" @bind="@pagination.ItemsPerPage">
            <option>3</option>
            <option>5</option>
            <option>10</option>
            <option>15</option>
        </select>
    </div>

    <div class="table-responsive">
        <QuickGrid Items="@itemsQueryable" Pagination="@pagination" class="table table-striped table-hover">
            <PropertyColumn Property="@(c => c.Xuat_Kho_ID)" Sortable="true" Title="NHẬP KHO ID" />
            <PropertyColumn Property="@(c => c.San_Pham_ID)" Sortable="true" Title="SẢN PHẨM ID" />
            <PropertyColumn Property="@(c => $"{c.SL_Xuat:0.0}")" Sortable="true" Title="SỐ LƯỢNG" />
            <PropertyColumn Property="@(c => $"{c.Don_Gia_Xuat:0.0}")" Sortable="true" Title="ĐƠN GIÁ" />
            <PropertyColumn Property="@(c => c.SL_Xuat * c.Don_Gia_Xuat)" Format="0.00" Sortable="true" Title="TRỊ GIÁ" />
            <TemplateColumn Title="Actions" Class="text-center">
                <button class="btn btn-info btn-sm me-1" @onclick="@(() => EditChiTietPhieuXuatKho(context.Xuat_Kho_ID, context.San_Pham_ID))">Hiệu chỉnh</button>
                <button class="btn btn-danger btn-sm me-1" @onclick="@(() => DeleteChiTietPhieuXuatKho(context.Xuat_Kho_ID, context.San_Pham_ID))">Xóa</button>
            </TemplateColumn>
        </QuickGrid>

    </div>
    @*  <Paginator State="@pagination" /> *@
    <div class="page-buttons d-flex justify-content-around">
        Page:
        @if (pagination.TotalItemCount.HasValue)
        {
            <div class="btn-group">
                @for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
                {
                    var capturedIndex = pageIndex;
                    <button @onclick="@(() => GoToPageAsync(capturedIndex))"
                            class="@PageButtonClass(capturedIndex) btn btn-secondary mx-1"
                            aria-current="@AriaCurrentValue(capturedIndex)"
                            aria-label="Go to page @(pageIndex + 1)">
                        @(pageIndex + 1)
                    </button>
                }
            </div>

        }
    </div>
}

@code {
    [Parameter]
    public string So_Phieu_Xuat_Kho { get; set; }
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    IQueryable<ChiTietPhieuXuatKhoModel>? itemsQueryable;
    private int itemCount = 0;

    protected override async Task OnInitializedAsync()
    {
        
        itemsQueryable = (await ChiTietPhieuXuatKhoService.GetAllChiTietByKhoIDAsync(So_Phieu_Xuat_Kho)).AsQueryable();
        itemCount = itemsQueryable.Count();
        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? PageButtonClass(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;


    void EditChiTietPhieuXuatKho(string Xuat_Kho_ID, string San_Pham_ID)
    {
        nav.NavigateTo($"/edit-chitietphieuxuatkho/{Xuat_Kho_ID}/{San_Pham_ID}");
    }

    void AddChiTietPhieuXuatKho(string So_Phieu_Xuat_Kho)
    {
        nav.NavigateTo($"/edit-chitietphieuxuatkho/{So_Phieu_Xuat_Kho}");
    }
    async Task DeleteChiTietPhieuXuatKho(string Nhap_Kho_ID, string San_Pham_ID)
    {
        var confirmed = await js.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn xóa phiếu này?");
        if (confirmed)
        {
            await ChiTietPhieuXuatKhoService.DeleteChiTietPhieuXuatAsync(Nhap_Kho_ID, San_Pham_ID);
            await SweetAlert.ShowToast("Xóa thành công", "Success", 1000);
            itemsQueryable = (await ChiTietPhieuXuatKhoService.GetAllChiTietByKhoIDAsync(Nhap_Kho_ID)).AsQueryable();
            pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
        }
        
    }
}
