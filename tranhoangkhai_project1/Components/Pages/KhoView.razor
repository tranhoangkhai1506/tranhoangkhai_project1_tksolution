@page "/kho-list"
@inject iKhoService KhoService

@inject NavigationManager nav
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<PageTitle>KHO </PageTitle>
<h1>KHO</h1>
<hr />
<div class="d-flex justify-content-between align-items-center">
    <div>
        <button class="btn btn-primary" @onclick="AddKho">Thêm kho mới</button>
    </div>
    <div>
        @if (IsAuthStatic.IsAuthenticated)
        {
            <span>Xin chào, @IsAuthStatic.UserLogin.Ma_Dang_Nhap! (@IsAuthStatic.UserLogin.Kho_ID) </span>
            <button class="btn btn-warning ml-2" @onclick="Logout">Đăng xuất</button>
        }
        else
        {
            <span>Bạn chưa đăng nhập.</span>
        }
    </div>
</div>
@if (itemsQueryable is null){
    
    <hr />
    <p>Chưa tìm thấy kho nào! Vui lòng thêm kho mới!</p>
}
else
{
    <hr />
    <div class="page-size-chooser mb-3">
        Items per page:
        <select class="form-select form-select-sm" style="width: auto; display: inline-block;" @bind="@pagination.ItemsPerPage">
            <option>3</option>
            <option>5</option>
            <option>10</option>
            <option>15</option>
        </select>
    </div>

    <div class="table-responsive">
        <QuickGrid Items="@itemsQueryable" Pagination="@pagination" class="table table-striped table-hover">
            <PropertyColumn Property="@(c => c.Ten_Kho)" Sortable="true" Title="TÊN" />
            <PropertyColumn Property="@(c => c.Ghi_Chu)" Sortable="true" Title="GHI CHÚ" />
            <TemplateColumn Title="Actions" Class="text-center">
                <button class="btn btn-info btn-sm me-1" @onclick="@(() => EditKho(context.Ten_Kho))">Hiệu chỉnh</button>
                <button class="btn btn-danger btn-sm me-1" @onclick="@(() => DeleteKho(context.Ten_Kho))">Xóa</button>
            </TemplateColumn>
        </QuickGrid>
    </div>
    @*  <Paginator State="@pagination" /> *@
    <div class="page-buttons d-flex justify-content-around">
        Page:
        @if (pagination.TotalItemCount.HasValue)
        {
            <div class="btn-group">
                @for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
                {
                    var capturedIndex = pageIndex;
                    <button @onclick="@(() => GoToPageAsync(capturedIndex))"
                            class="@PageButtonClass(capturedIndex) btn btn-secondary mx-1"
                            aria-current="@AriaCurrentValue(capturedIndex)"
                            aria-label="Go to page @(pageIndex + 1)">
                        @(pageIndex + 1)
                    </button>
                }
            </div>

        }
    </div>
    
}

@code {
    bool isAuthenticated = IsAuthStatic.IsAuthenticated;
    KhoUserModel isAccountAuthenticated = IsAuthStatic.UserLogin;
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    IQueryable<KhoModel>? itemsQueryable;
    protected override async Task OnInitializedAsync()
    {
        itemsQueryable = (await KhoService.GetAllKhoAsync()).AsQueryable();
        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? PageButtonClass(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;

    void EditKho(string tenKho)
    {
        if (isAuthenticated && isAccountAuthenticated.Kho_ID.Equals(tenKho))
        {
            nav.NavigateTo($"/edit-kho/{tenKho}");
        }
        else
        {
            nav.NavigateTo($"/login/{tenKho}");
        }

    }

    void AddKho()
    {
        nav.NavigateTo($"/edit-kho");
    }
    async Task DeleteKho(string tenKho)
    {
        
        if (isAuthenticated && isAccountAuthenticated.Kho_ID.Equals(tenKho))
        {
            await KhoService.DeleteKhoAsync(tenKho);
            itemsQueryable = (await KhoService.GetAllKhoAsync()).AsQueryable();
            pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
        }
        else
        {
            nav.NavigateTo($"/login/{tenKho}");
        }
        
    }
    void Logout()
    {
        IsAuthStatic.MarkUserAsLoggedOut(); 
        IsAuthStatic.MarkAccountUserAsLoggedOut(); 
        //nav.NavigateTo("/login"); // Redirect to the login page
    }
}
