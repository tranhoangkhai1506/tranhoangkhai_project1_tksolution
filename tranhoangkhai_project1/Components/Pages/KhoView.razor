@page "/kho-list"
@inject iKhoService KhoService
@inject IJSRuntime js
@inject ShowErrorMessage SweetAlert
@inject iPhieuNhapKhoService PhieuNhapKhoService
@inject iPhieuXuatKhoService PhieuXuatKhoService
@inject iHieuChinhPhieuNhapKhoService HieuChinhPhieuNhapKhoService
@inject iHieuChinhPhieuXuatKhoService HieuChinhPhieuXuatKhoService
@inject NavigationManager nav
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<PageTitle>KHO</PageTitle>
<h1 style="text-align: center;"><strong>KHO</strong></h1>
<hr />
@if (itemCount == 0)
{
    <hr />
    <p>Chưa tìm thấy loại sản phẩm nào! Vui lòng thêm loại sản phẩm!</p>
}
else
{
    <div class="page-size-chooser mb-2 d-flex justify-content-between align-items-center">
        ITEMS PER PAGE:
        <select class="form-select form-select-sm" style="width: auto; display: inline-block;" @bind="@pagination.ItemsPerPage">
            <option>5</option>
            <option>10</option>
            <option>15</option>
            <option>25</option>
        </select>
        <div>
            @if (IsAuthStatic.IsAuthenticated)
            {
                <span>Xin chào, @IsAuthStatic.UserLogin.Ma_Dang_Nhap! (@IsAuthStatic.UserLogin.Kho_ID) </span>
                <button class="btn btn-warning ml-2" @onclick="Logout">Đăng xuất</button>
            }
            else
            {
                <span>Bạn chưa đăng nhập.</span>
            }
        </div>
    </div>
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <strong>THÔNG TIN KHO</strong>
            <button class="btn btn-outline-success" @onclick="AddKho">THÊM KHO</button>
        </div>
        <div class="table-responsive">
            <QuickGrid Items="@FilteredKho" Pagination="@pagination" class="table table-striped table-hover">
                <PropertyColumn Property="@(c => c.Ten_Kho)" Sortable="true" Class="country-name" Title="TÊN KHO">
                    <ColumnOptions>
                        <div class="search-box">
                            <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Tên kho..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Property="@(c => c.Ghi_Chu)" Sortable="true" Title="GHI CHÚ" />
                <TemplateColumn Title="Actions" Class="text-left">
                    <button class="btn btn-info btn-sm me-1" @onclick="@(() => EditKho(context.Ten_Kho))">Hiệu chỉnh</button>
                    <button class="btn btn-danger btn-sm me-1" @onclick="@(() => DeleteKho(context.Ten_Kho))">Xóa</button>
                </TemplateColumn>
            </QuickGrid>
        </div>
        <div class="card-footer">
            <div class="hstack gap-3 float-end">
                <div class="page-buttons d-flex justify-content-around">
                    @if (pagination.TotalItemCount.HasValue)
                    {
                        <div class="btn-group">
                            @for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
                            {
                                var capturedIndex = pageIndex;
                                <button @onclick="@(() => GoToPageAsync(capturedIndex))"
                                        class="@PageButtonClass(capturedIndex) btn btn-secondary mx-1"
                                        aria-current="@AriaCurrentValue(capturedIndex)"
                                        aria-label="Go to page @(pageIndex + 1)">
                                    @(pageIndex + 1)
                                </button>
                            }
                        </div>

                    }
                </div>
            </div>
        </div>
    </div>
}
@code {
    bool isAuthenticated = IsAuthStatic.IsAuthenticated;
    KhoUserModel isAccountAuthenticated = IsAuthStatic.UserLogin;
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    IQueryable<KhoModel>? itemsQueryable;
    private int itemCount = 0;
    string nameFilter;
    IQueryable<KhoModel> FilteredKho
    {
        get
        {
            var result = itemsQueryable;
            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = itemsQueryable.Where(c => c.Ten_Kho.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }

            return result;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        itemsQueryable = (await KhoService.GetAllKhoAsync()).AsQueryable();
        itemCount = itemsQueryable.Count();
        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? PageButtonClass(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;

    async void EditKho(string tenKho)
    {
        if (isAuthenticated && isAccountAuthenticated.Kho_ID.Equals(tenKho))
        {
            nav.NavigateTo($"/edit-kho/{tenKho}");
        }
        else
        {
            await SweetAlert.ShowToast("Bạn không có quyền sửa, Hãy đăng nhập!", "Error", 1000);
            nav.NavigateTo($"/login/{tenKho}");
        }

    }

    void AddKho()
    {
        nav.NavigateTo($"/edit-kho");
    }
    async Task DeleteKho(string tenKho)
    {

        if (isAuthenticated && isAccountAuthenticated.Kho_ID.Equals(tenKho))
        {
            var existChildrenOfPhieuNhapKho = await PhieuNhapKhoService.GetByKhoIDAsync(tenKho);
            var existChildrenOfPhieuXuatKho = await PhieuXuatKhoService.GetByKhoIDAsync(tenKho);
            var existChildrenOfHieuChinhPhieuNhapKho = await HieuChinhPhieuNhapKhoService.GetByKhoIDAsync(tenKho);
            var existChildrenOfHieuChinhXuatNhapKho = await HieuChinhPhieuXuatKhoService.GetByKhoIDAsync(tenKho);
            if (existChildrenOfPhieuNhapKho is null && existChildrenOfPhieuXuatKho is null && existChildrenOfHieuChinhPhieuNhapKho is null && existChildrenOfHieuChinhXuatNhapKho is null)
            {
                var confirmed = await js.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn xóa loại sản phẩm này?");
                if (confirmed)
                {
                    await KhoService.DeleteKhoAsync(tenKho);
                    itemsQueryable = (await KhoService.GetAllKhoAsync()).AsQueryable();
                    pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
                    await SweetAlert.ShowToast("Xóa kho thành công!", "Success", 1000);
                }
            }
            else
            {
                await SweetAlert.ShowToast("Không thể xóa kho!", "Error", 1000);
            }
            
        }
        else
        {
            await SweetAlert.ShowToast("Bạn không có quyền xoá, Hãy đăng nhập!", "Error", 1000);
            nav.NavigateTo($"/login/{tenKho}");
        }
        
    }
    void Logout()
    {
        IsAuthStatic.MarkUserAsLoggedOut(); 
        IsAuthStatic.MarkAccountUserAsLoggedOut();
    }
}
