@page "/kho-list"
@inject iKhoService KhoService

@inject NavigationManager nav
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<PageTitle>KHO </PageTitle>
<h1>KHO</h1>
<hr />
<div class="d-flex justify-content-between align-items-center">
    <div>
        <button class="btn btn-primary" @onclick="AddKho">Thêm kho mới</button>
    </div>
    <div>
        @if (IsAuthStatic.IsAuthenticated)
        {
            <span>Xin chào, @IsAuthStatic.UserLogin.Ma_Dang_Nhap! (@IsAuthStatic.UserLogin.Kho_ID) </span>
            <button class="btn btn-warning ml-2" @onclick="Logout">Đăng xuất</button>
        }
        else
        {
            <span>Bạn chưa đăng nhập.</span>
        }
    </div>
</div>
@if (khoList.Count == 0)
{
    <hr />
    <p>Chưa tìm thấy kho nào! Vui lòng thêm kho mới!</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    Tên Kho
                </th>
                <th>
                    Ghi Chú
                </th>
                <th>
                    
                </th>
                <th>

                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var kho in khoList)
            {
                <tr>
                    <td>
                        @kho.Ten_Kho
                    </td>
                    <td>
                        @kho.Ghi_Chu
                    </td>
                    <td>
                        <button class="btn btn-info" @onclick="@(()=>EditKho(kho.Ten_Kho))">Chỉnh sửa</button>
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="@(()=>DeleteKho(kho.Ten_Kho))">Xóa</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    
}

@code {
    List<KhoModel> khoList = new List<KhoModel>();
    bool isAuthenticated = IsAuthStatic.IsAuthenticated;
    KhoUserModel isAccountAuthenticated = IsAuthStatic.UserLogin;



    protected override async Task OnInitializedAsync()
    {
        khoList = await KhoService.GetAllKhoAsync();
    }

    void EditKho(string tenKho)
    {
        if (isAuthenticated && isAccountAuthenticated.Kho_ID.Equals(tenKho))
        {
            nav.NavigateTo($"/edit-kho/{tenKho}");
        }
        else
        {
            nav.NavigateTo($"/login/{tenKho}");
        }

    }

    void AddKho()
    {
        nav.NavigateTo($"/edit-kho");
    }
    async Task DeleteKho(string tenKho)
    {
        
        if (isAuthenticated && isAccountAuthenticated.Kho_ID.Equals(tenKho))
        {
            await KhoService.DeleteKhoAsync(tenKho);
            khoList = await KhoService.GetAllKhoAsync();
        }
        else
        {
            nav.NavigateTo($"/login/{tenKho}");
        }
        
    }
    void Logout()
    {
        IsAuthStatic.MarkUserAsLoggedOut(); 
        IsAuthStatic.MarkAccountUserAsLoggedOut(); 
        //nav.NavigateTo("/login"); // Redirect to the login page
    }
}
