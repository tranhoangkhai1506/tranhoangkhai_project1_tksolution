@page "/edit-donvitinh"
@page "/edit-donvitinh/{Ten_Don_Vi_Tinh}"
@inject iDonViTinhService DonViTinhSevice
@inject IJSRuntime js
@inject ShowErrorMessage SweetAlert
@inject NavigationManager nav
@rendermode @(new InteractiveServerRenderMode(prerender:false))

@if (Ten_Don_Vi_Tinh is null)
{
    <PageTitle>THÊM ĐƠN VỊ TÍNH</PageTitle>
    <h1 style="text-align: center;"><strong>THÊM ĐƠN VỊ TÍNH</strong></h1>
    <hr />
    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @ErrorMessage
        </div>
    }
    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-6">
                <div class="card">
                    <div class="card-header"><strong>THÔNG TIN ĐƠN VỊ TÍNH</strong></div>
                    <div class="card-body">
                        <EditForm Model="CurrentDVT" OnValidSubmit="HandleSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label for="Ten_Don_Vi_Tinh" class="form-label">Tên Đơn Vị Tính</label>
                                <InputText id="Ten_Don_Vi_Tinh" @bind-Value="CurrentDVT.Ten_Don_Vi_Tinh" class="form-control" />
                            </div>

                            <div class="mb-3">
                                <label for="Ghi_Chu" class="form-label">Ghi Chú</label>
                                <InputTextArea id="Ghi_Chu" @bind-Value="CurrentDVT.Ghi_Chu" class="form-control" />
                            </div>
                        </EditForm>
                    </div>
                    <div class="card-footer">
                        <div class="hstack gap-3 float-end">
                            <form method="dialog">
                                <button class="btn btn-danger" @onclick="OnClose">Close</button>
                            </form>
                            <button class="btn btn-success" @onclick="HandleSubmit" type="submit">Lưu</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
}
else
{
    <PageTitle>CHỈNH SỬA "@CurrentDVT.Ten_Don_Vi_Tinh"</PageTitle>
    <h1 style="text-align: center;"><strong>SỬA ĐƠN VỊ TÍNH</strong></h1>
    <hr />
    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @ErrorMessage
        </div>
    }
    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-6">
                <div class="card">
                    <div class="card-header"><strong>THÔNG TIN ĐƠN VỊ TÍNH</strong></div>
                    <div class="card-body">
                        <EditForm Model="CurrentDVT" OnSubmit="HandleSubmit">
                            <div>
                                <label for="Ten_Don_Vi_Tinh"><strong>Tên đơn vị tính</strong></label>
                                <InputText id="Ten_Don_Vi_Tinh" @bind-Value="CurrentDVT.Ten_Don_Vi_Tinh" class="form-control"></InputText>
                                <label for="Ghi_Chu"><strong>Ghi Chú</strong></label>
                                <InputText id="Ghi_Chu" @bind-Value="CurrentDVT.Ghi_Chu" class="form-control"></InputText>
                            </div>
                        </EditForm>
                    </div>
                    <div class="card-footer">
                        <div class="hstack gap-3 float-end">
                            <form method="dialog">
                                <button class="btn btn-danger" @onclick="OnClose">Close</button>
                            </form>
                            <button class="btn btn-success" @onclick="HandleSubmit" type="submit">Lưu</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
}

@code {
    [Parameter]
    public string? Ten_Don_Vi_Tinh { get; set; }
    public string ErrorMessage { get; set; }
    public DonViTinhModel CurrentDVT { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        if (Ten_Don_Vi_Tinh is not null)
        {
            var dvt = await DonViTinhSevice.GetByIdAsync(Int16.Parse(Ten_Don_Vi_Tinh));
            if (dvt is not null)
            {
                CurrentDVT = dvt;
            }
        }
    }

    async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(CurrentDVT.Ten_Don_Vi_Tinh))
        {
            await SweetAlert.ShowToast("Tên đơn vị tính không được để trống.", "Error", 1000);
            return;
        }

        var existingUnitCode = await DonViTinhSevice.GetByNameAsync(CurrentDVT.Ten_Don_Vi_Tinh);
        if (existingUnitCode is not null && Convert.ToInt16(Ten_Don_Vi_Tinh) != (existingUnitCode.DonViTinhID))
        {
            await SweetAlert.ShowToast("Tên đơn vị tính đã tồn tại.", "Error", 1000);
            return;
        }
        else if (Ten_Don_Vi_Tinh is not null)
        {
            await DonViTinhSevice.UpdateDonViTinhAsync(CurrentDVT, Int16.Parse(Ten_Don_Vi_Tinh));
            await SweetAlert.ShowToast("Sửa thành công", "Success", 1000);
            nav.NavigateTo("/donvitinh-list");
        }
        else
        {
            await DonViTinhSevice.AddDonViTinh(CurrentDVT);
            await SweetAlert.ShowToast("Thêm thành công", "Success", 1000);
            nav.NavigateTo("/donvitinh-list");
        }
    }
    private void OnClose(EventArgs e)
    {
        ClearPhieuContainer();
        nav.NavigateTo("/donvitinh-list");
    }
    public void ClearPhieuContainer()
    {
        CurrentDVT = new();
    }
}
